#!/bin/bash

count=1
quit=0
folder=/sys/class/leds
declare -a folderarray
trap '' 2

menu(){
	count=1
	echo "Welcome to the LED Configuration Menu!"
	echo "======================================"
	echo "Please select an LED to configure:"
	for dir in $folder/*;
	do 
		echo $count. $dir
		folderarray[$count]=$dir
		let count++
	done
	echo $count. "Quit"
}

submenu(){
	subquit=0
	leddesig=${1##*/}
	while [ $subquit -eq 0 ]; do
		echo $leddesig
		echo "======================================"
		echo "What would you like to do with this LED?"
		echo "1) turn on"
		echo "2) turn off"
		echo "3) associate with a system event"
		echo "4) associate with the performance of a process"
		echo "5) stop association with a process' performance"
		echo "6) quit to main menu"
		echo "Please enter a number (1-6) for your choice: "	
		read choice
		echo
		case $choice in
			1)
				echo 1 | sudo tee $1/brightness >/dev/null
				echo $leddesig "turned on."
				echo
				;;
			2)
				echo 0 | sudo tee $1/brightness >/dev/null
				echo $leddesig "turned off."
				;;
			3)
				syseventmenu $1
				echo
				;;
			4)
				kill %1
				echo 0 | sudo tee $1/brightness >/dev/null
				echo none | sudo tee $1/trigger >/dev/null
				processmenu $1
				;;
			5)
				kill %1
				echo 0 | sudo tee $1/brightness >/dev/null
				echo "Background monitoring stopped."
				;;
			6)
				subquit=1
				;;
			?)
				echo "Invalid option entered. Please enter again."
				echo ""
				;;
		esac
	done
}

#Associate LED with a system event
syseventmenu(){
	syseventquit=0
	while [ $syseventquit -eq 0 ]; do
		count=1
		for trigger in $(cat $1/trigger);
		do 
			echo $count. $trigger
			syseventarray[$count]=$trigger
			let count++
		done
		echo $count. "Quit"
		read choice
		echo
		if ((1<=$choice && $choice<=$count-1))
			then
			echo ${syseventarray[$choice]} | sudo tee $1/trigger >/dev/null
			syseventquit=1
		elif [ $choice -eq $count ]
			then
			syseventquit=1
		else
			echo "Invalid option entered. Please enter again."
			echo
		fi
	done
}

#Associate LED with the performance of a process
processmenu(){
	processcount=0
	declare -a procduparray
	echo "Associate LED with the performance of a process"
	echo "-----------------------------------------------"
	echo "Please enter the name of the program to monitor"
	echo "(partial names are ok):"
	read program
	echo "Do you wish to:"
	echo "1) monitor memory"
	echo "2) monitor CPU?"
	read choice1
	for prog in $(ps --no-headers -C $program | awk '{ print $4 }'); do
		if [[ "${program,,}" == "${prog}"* ]];
		then
			let processcount++
			procduparray[$processcount]=$prog
			echo $prog
		fi
	done
	if (($processcount >1 ))
		then
			echo "Name Conflict"
			echo "-------------"
			echo "This program has detected a name conflict."
			echo "Select which program to monitor:"
			for index in ${!procduparray[*]}
			do
				printf "%d: %s\n" $index ${procduparray[$index]}
			done
			read choice2
			procduparray[$choice2]=$prog
	elif (($processcount == 0))
		then
			echo "Program not found."
	fi
	source ./led_monitor $1 $prog $choice1 &
}


#Script Entry Point is here
while [ $quit -eq 0 ]; do
	menu
	read choice
	echo
	if ((1<=$choice && $choice<=$count-1))
		then
		submenu ${folderarray[$choice]}
	elif [ $choice -eq $count ]
		then
		quit=1
	else
		echo "Invalid option entered. Please enter again."
		echo
	fi
done
echo "Goodbye!"
